<?xml version="1.0"?>
<doc>
    <assembly>
        <name>BattleField7</name>
    </assembly>
    <members>
        <member name="T:BattleField7Namespace.Condition">
            <summary>
            Condition types for Field
            </summary>
        </member>
        <member name="M:BattleField7Namespace.BattleFieldGame.Main">
            <summary>
            Simply calls the engine and runs it.
            </summary>
        </member>
        <member name="T:BattleField7Namespace.IDrawer">
            <summary>
            Basic functionality to display Battle Field 7 game.
            </summary>
        </member>
        <member name="M:BattleField7Namespace.IDrawer.DrawGame(BattleField7Namespace.Field[0:,0:])">
            <summary>
            Draws the game.
            </summary>
            <param name="gameField">The game field.</param>
        </member>
        <member name="M:BattleField7Namespace.IDrawer.AskForSizeInput">
            <summary>
            Asks for size input.
            </summary>
            <returns></returns>
        </member>
        <member name="M:BattleField7Namespace.IDrawer.AskForPositionInput">
            <summary>
            Asks for position input.
            </summary>
            <returns></returns>
        </member>
        <member name="M:BattleField7Namespace.IDrawer.ShowMessage(System.String)">
            <summary>
            Shows the message.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:BattleField7Namespace.IDrawer.ShowCongratulations(System.String)">
            <summary>
            Shows the congratulations message.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:BattleField7Namespace.IDrawer.ShowGameOver(System.String)">
            <summary>
            Shows the game over message.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:BattleField7Namespace.IDrawer.ShowNote(System.String)">
            <summary>
            Shows a note message.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:BattleField7Namespace.IDrawer.ShowAskInput(System.String)">
            <summary>
            Shows a request for input message.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:BattleField7Namespace.IDrawer.ShowBombsCount(System.Int32)">
            <summary>
            Shows the bombs count.
            </summary>
            <param name="count">The count.</param>
        </member>
        <member name="M:BattleField7Namespace.IDrawer.ShowTurnsCount(System.Int32)">
            <summary>
            Shows the turns count.
            </summary>
            <param name="count">The count.</param>
        </member>
        <member name="T:BattleField7Namespace.InitialGameClass.BattleGame">
            <summary>
            Това е по - лесен за четене вариант на основния клас. Единствените промени до момента са в именуването и подреждането,
            има изведени и няколко помощни метода от повтарящия се код. Оставил съм закоментирани старите съдържания на най - 
            безобразно заплетените методи за сравнение и в случай, че абстракцията ми не е сработила добре.
            Не съм променял нищо по логиката, макар на места да може да има нужда (NumberInRange() методът със сигурност).
            Ако ще пренаписваме всичко отначало, поне ще може да сравняваме функционалността с този вариант.
            Оставих името Bombi, за да не заемам някое по - подходящо, което да дадем на нов проект. //vnci
            </summary>
        </member>
        <member name="M:BattleField7Namespace.InitialGameClass.BattleGame.NumberInRange(System.Int32,System.Int32)">
            <summary>
            Random number generator
            </summary>
            <param name="min">lower bound</param>
            <param name="max">upper bound</param>
            <returns>An Integer in the range between <paramref name="min"/> and <paramref name="max"/></returns>
            <remarks>Needs rebuild to generate new numbers, otherwise the field prodiced is always the
            same for the given size.</remarks>
        </member>
        <member name="M:BattleField7Namespace.InitialGameClass.BattleGame.StraightSplash(System.Int32,System.Int32,System.Int32)">
            <summary>
            Represents an explosion that spreads straight in all four directions,
            clearing bombs and empty cells in its path
            </summary>
            <param name="row"></param>
            <param name="column"></param>
            <param name="range"></param>
        </member>
        <member name="M:BattleField7Namespace.InitialGameClass.BattleGame.DiagonalSplash(System.Int32,System.Int32,System.Int32)">
            <summary>
            Represents an explosion that spreads diagonally in all four directions,
            clearing bombs and empty cells in its path
            </summary>
            <param name="row"></param>
            <param name="column"></param>
            <param name="range"></param>
        </member>
        <member name="M:BattleField7Namespace.InitialGameClass.BattleGame.ValidCoordinates(System.Int32,System.Int32)">
            <summary>
            Checks if the coordinates given are within the field
            </summary>
            <param name="row"></param>
            <param name="column"></param>
            <returns></returns>
        </member>
        <member name="M:BattleField7Namespace.InitialGameClass.BattleGame.IsBomb(System.Int32,System.Int32)">
            <summary>
            Determines if there is a bomb at given coordinates
            </summary>
            <param name="row"></param>
            <param name="column"></param>
            <returns>True if the cell has not been cleared already and is not marked as empty in the beginning</returns>
        </member>
        <member name="F:BattleField7Namespace.PopupSizeInput.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:BattleField7Namespace.PopupSizeInput.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:BattleField7Namespace.PopupSizeInput.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:BattleField7Namespace.Engine">
            <summary>
            Engine that runs the Battle Field 7 game
            </summary>
        </member>
        <member name="M:BattleField7Namespace.Engine.#ctor(BattleField7Namespace.IDrawer)">
            <summary>
            Initializes a new instance of the <see cref="T:BattleField7Namespace.Engine"/> class.
            </summary>
            <param name="drawer">The drawer.</param>
        </member>
        <member name="M:BattleField7Namespace.Engine.RunGame">
            <summary>
            Runs the game.
            </summary>
            <param name="drawer">The drawer.</param>
            <exception cref="T:System.ArgumentException">Size input must be a number between 1 and 10;size</exception>
        </member>
        <member name="M:BattleField7Namespace.Engine.StartGame">
            <summary>
            Starts the game.
            </summary>
        </member>
        <member name="M:BattleField7Namespace.Engine.DetonateNearbyFields(BattleField7Namespace.Field[0:,0:],System.Int32,System.Int32,System.Int32)">
            <summary>
            Detonates the nearby fields after explosion.
            </summary>
            <param name="gameField">The game field.</param>
            <param name="positionCol">The position x.</param>
            <param name="positionRow">The position y.</param>
            <param name="explosionPower">The explosion power.</param>
        </member>
        <member name="M:BattleField7Namespace.Engine.TryGetCoords(System.String,System.Int32,System.Int32,System.Int32@,System.Int32@)">
            <summary>
            Tries the get coordinates.
            </summary>
            <param name="input">The input.</param>
            <param name="cols">The size x.</param>
            <param name="rows">The size y.</param>
            <param name="col">The coord x.</param>
            <param name="row">The coord y.</param>
            <returns></returns>
        </member>
        <member name="M:BattleField7Namespace.Engine.OnBombBlownUpEvent">
            <summary>
            Keeps count of the bombs left.
            </summary>
        </member>
        <member name="M:BattleField7Namespace.Engine.InitializeGameField(System.Int32,System.Int32)">
            <summary>
            Initializes the game field.
            </summary>
            <param name="bombsCount">The bombs count.</param>
            <param name="col">The size x.</param>
            <param name="row">The size y.</param>
            <returns></returns>
        </member>
        <member name="M:BattleField7Namespace.Engine.SetSizeOfGameField">
            <summary>
            Sets the size of game field.
            </summary>
        </member>
        <member name="M:BattleField7Namespace.Engine.InitializeExplosionRanges">
            <summary>
            Initializes the explosion ranges.
            ExplosionRanges holds the reletive positions to detonate for each explosion power
            </summary>
        </member>
        <member name="P:BattleField7Namespace.Engine.TurnsCount">
            <summary>
            Gets or sets the turns count.
            </summary>
            <value>
            The turns count.
            </value>
        </member>
        <member name="P:BattleField7Namespace.Engine.BombsCount">
            <summary>
            Gets or sets the bombs count.
            </summary>
            <value>
            The bombs count.
            </value>
        </member>
        <member name="M:BattleField7Namespace.ConsoleDrawer.DrawGame(BattleField7Namespace.Field[0:,0:])">
            <summary>
            Draws the game in the console.
            </summary>
            <param name="gameField">The game field.</param>
            <exception cref="T:System.NotImplementedException">ConsoleDrawer.DrawGame() is not implemented</exception>
        </member>
        <member name="M:BattleField7Namespace.ConsoleDrawer.AskForSizeInput">
            <summary>
            Asks for size input.
            </summary>
            <returns></returns>
        </member>
        <member name="M:BattleField7Namespace.ConsoleDrawer.AskForPositionInput">
            <summary>
            Asks for position input.
            </summary>
            <returns></returns>
        </member>
        <member name="M:BattleField7Namespace.ConsoleDrawer.ShowMessage(System.String)">
            <summary>
            Shows the message.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:BattleField7Namespace.ConsoleDrawer.ShowCongratulations(System.String)">
            <summary>
            Shows the congratulations message.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:BattleField7Namespace.ConsoleDrawer.ShowGameOver(System.String)">
            <summary>
            Shows the game over message.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:BattleField7Namespace.ConsoleDrawer.ShowNote(System.String)">
            <summary>
            Shows a note message.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:BattleField7Namespace.ConsoleDrawer.ShowAskInput(System.String)">
            <summary>
            Shows a request for input message.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:BattleField7Namespace.ConsoleDrawer.ShowBombsCount(System.Int32)">
            <summary>
            Shows the bombs count.
            </summary>
            <param name="count">The count.</param>
        </member>
        <member name="M:BattleField7Namespace.ConsoleDrawer.ShowTurnsCount(System.Int32)">
            <summary>
            Shows the turns count.
            </summary>
            <param name="count">The count.</param>
        </member>
        <member name="T:BattleField7Namespace.WinFormsDrawer">
            <summary>
            A Windows Forms game interface
            </summary>
        </member>
        <member name="F:BattleField7Namespace.WinFormsDrawer.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:BattleField7Namespace.WinFormsDrawer.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:BattleField7Namespace.WinFormsDrawer.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="M:BattleField7Namespace.WinFormsDrawer.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:BattleField7Namespace.WinFormsDrawer"/> class.
            </summary>
        </member>
        <member name="M:BattleField7Namespace.WinFormsDrawer.DrawGame(BattleField7Namespace.Field[0:,0:])">
            <summary>
            Draws the game.
            </summary>
            <param name="gameField">The game field.</param>
        </member>
        <member name="M:BattleField7Namespace.WinFormsDrawer.AskForSizeInput">
            <summary>
            Asks for size input.
            </summary>
            <returns>size input</returns>
        </member>
        <member name="M:BattleField7Namespace.WinFormsDrawer.AskForPositionInput">
            <summary>
            Asks for position input.
            </summary>
            <returns>position input</returns>
        </member>
        <member name="M:BattleField7Namespace.WinFormsDrawer.ShowMessage(System.String)">
            <summary>
            Shows the message.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:BattleField7Namespace.WinFormsDrawer.ShowCongratulations(System.String)">
            <summary>
            Shows the congratulations message.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:BattleField7Namespace.WinFormsDrawer.ShowGameOver(System.String)">
            <summary>
            Shows the game over message.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:BattleField7Namespace.WinFormsDrawer.ShowNote(System.String)">
            <summary>
            Shows a note message.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:BattleField7Namespace.WinFormsDrawer.ShowAskInput(System.String)">
            <summary>
            Shows a request for input message.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:BattleField7Namespace.WinFormsDrawer.ShowBombsCount(System.Int32)">
            <summary>
            Shows the bombs count.
            </summary>
            <param name="count">The count.</param>
        </member>
        <member name="M:BattleField7Namespace.WinFormsDrawer.ShowTurnsCount(System.Int32)">
            <summary>
            Shows the turns count.
            </summary>
            <param name="count">The count.</param>
        </member>
        <member name="M:BattleField7Namespace.WinFormsDrawer.SetGameFieldSize(System.Int32)">
            <summary>
            Sets the size of the game field.
            </summary>
            <param name="size">The size.</param>
        </member>
        <member name="M:BattleField7Namespace.WinFormsDrawer.SetFieldValue(System.String[])">
            <summary>
            Sets the field value.
            </summary>
            <param name="paramsOfField">The parameters of field.</param>
        </member>
        <member name="M:BattleField7Namespace.WinFormsDrawer.WinFormsDrawer_FormClosing(System.Object,System.Windows.Forms.FormClosingEventArgs)">
            <summary>
            Handles the FormClosing event of the WinFormsDrawer control.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The <see cref="T:System.Windows.Forms.FormClosingEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:BattleField7Namespace.WinFormsDrawer.gameFieldGridView_CellMouseClick(System.Object,System.Windows.Forms.DataGridViewCellMouseEventArgs)">
            <summary>
            Handles the CellMouseClick event of the gameFieldGridView control.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The <see cref="T:System.Windows.Forms.DataGridViewCellMouseEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="T:BattleField7Namespace.Properties.Resources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:BattleField7Namespace.Properties.Resources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:BattleField7Namespace.Properties.Resources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="T:BattleField7Namespace.Field">
            <summary>
            A single field of the Battle Field 7 game.
            Can be either an empty field or a field with a bomb.
            </summary>
        </member>
        <member name="M:BattleField7Namespace.Field.#ctor(BattleField7Namespace.Condition,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:BattleField7Namespace.Field"/> class.
            </summary>
            <param name="condition">The condition of the field.</param>
            <param name="explosivePower">The explosive power.</param>
        </member>
        <member name="M:BattleField7Namespace.Field.IntentionalDetonate">
            <summary>
            Intentionaly detonates the field
            </summary>
            <returns>Fields explosive power</returns>
        </member>
        <member name="M:BattleField7Namespace.Field.DetonateByChainReaction">
            <summary>
            Detonates the field by chain reaction
            </summary>
        </member>
        <member name="P:BattleField7Namespace.Field.Condition">
            <summary>
            Gets the condition.
            </summary>
            <value>
            The condition.
            </value>
        </member>
        <member name="P:BattleField7Namespace.Field.ExplosivePower">
            <summary>
            Gets the explosive power.
            </summary>
            <value>
            The explosive power.
            </value>
            <exception cref="T:System.ArgumentOutOfRangeException">Explosive power of field must be between 0 an 5.</exception>
        </member>
    </members>
</doc>
